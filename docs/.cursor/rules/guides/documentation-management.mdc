---
description: Cursor Rule 建立與管理指南。當你需要建立新的 Agent Requested 類型 Cursor Rule、更新現有規則、或管理 rule 架構時調用此規則，用於確保 rule 品質和開發流程的一致性。專精於 rule 設計原則、內容架構、品質檢核。
globs: 
alwaysApply: false
---
# 專案文件與規則管理指南

## 🎯 文件管理核心理念
本指南旨在建立一套系統化、專業且可持續維護的專案文件管理框架，確保所有技術指引與開發規範（Cursor Rules）都具備高度的可複用性與長期價值。

當需要為專案建立新的規範或沉澱知識時，應優先考慮建立或更新 Cursor Rule，而不是撰寫一次性的文件。

## 🤖 Cursor Rule 管理總覽

### 藍圖 (Blueprints) 的生命週期管理
為了有效管理不同階段的開發藍圖 (`.cursor/rules/blueprints/`)，我們採用以下基於狀態的目錄分類法，以確保 AI 與開發者能清晰地識別任務的優先級與狀態：

- **`blueprints/` (根目錄) - 活躍中 (Active)**
  - **用途**: 存放當前正在積極開發、需要 AI 頻繁協作與追蹤的焦點任務藍圖。
  - **原則**: 此目錄應保持簡潔，只包含最高優先級的任務。當任務完成或暫停時，應立即移出。

- **`blueprints/icebox/` - 暫存區 (On Hold / Planned)**
  - **用途**: 存放所有「已規劃但未開始」或「開發到一半暫停」的藍圖。這是一個「點子冰箱」，用於保存有價值但非當前焦點的任務。
  - **原則**: 定期回顧此目錄，以重新評估任務的優先級。

- **`blueprints/archive/` - 封存庫 (Archived)**
  - **用途**: 存放所有**已完成**的開發藍圖。
  - **原則**: 這是專案的歷史知識庫與寶貴資產，應永久保留以供未來參考，但不應直接刪除。

透過此分類法，我們能動態地反映開發的節奏與焦點，並為 AI 提供清晰的上下文，使其能更精準地協助開發工作。

### 核心原則：優先建立可複用的規則
- **核心用途**: 將可複用的技術指引、開發規範與最佳實踐沉澱為 Cursor Rules (`.cursor/rules/*.mdc`)。
- **適用情境**: 需長期參考、跨專案應用的技術知識、架構設計或開發模式。
- **建立策略**:
    1.  **需求評估**: 確認建立新 Rule 的必要性，避免為單次性問題建立規則。
    2.  **重複性檢查**: 檢索現有 Rules，確保新規則不存在功能上的重疊。
    3.  **適用範圍**: 定義 Rule 的應用情境與生命週期，優先考慮通用性與長期性。
    4.  **維護成本**: 評估長期維護與更新的投入，確保其符合成本效益。

### AI 與 Rule 元數據協作模式 (重要)
此為 AI 與使用者協作建立和維護 Cursor Rule 的核心模式，旨在釐清 AI 與使用者之間的職責，最大化開發效率。

**核心限制**: AI **可以**讀取和修改 `.mdc` 檔案的 Markdown **內容**，但**無法**直接修改由 Cursor IDE 管理的檔案**元數據** (例如 `description`, `type`, `alwaysApply` 等)。

因此，雙方需遵循以下優化後的協作流程：

**AI 的職責 (生成內容與提供元數據建議):**
1.  **直接生成規則檔案**: 當確認要建立新規則時，AI **應直接生成完整的 `.mdc` 檔案內容**並儲存，無需使用者預先建立空檔案。
2.  **起草並提供 Description**: 在檔案建立完成後，AI **必須**根據下文的「Rule Description 撰寫規範」，草擬一份高品質的 `description`。
3.  **提醒使用者更新**: AI 需將草擬好的 `description` **明確地展示給使用者**，並提醒使用者為此規則手動更新元數據。

**使用者的職責 (審核與更新元數據):**
1.  **審核內容**: 檢視 AI 生成的 `.mdc` 檔案內容是否符合預期。
2.  **更新元數據**: 在 Cursor IDE 中，透過 `Ctrl+K` > `Edit User Rules...` 找到 AI 剛剛建立的規則。
    *   將 `Type` 設為 **`Agent Requested`**。
    *   將 AI 提供的 `description` 文字**貼入**對應的欄位。
    *   根據需要設定 `Always Apply` 等其他元數據。

透過此優化模式，我們能將檔案生成的任務完全自動化，僅需使用者進行最後的元數據設定，從而實現最高效的人機協作。

### Cursor Rule 建立與維護流程
1.  **需求分析**: 確認該知識點或規範具備長期參考價值。
2.  **規則設計**: 參考現有範本（如 `./development-conventions.mdc` 或 `./project-architecture.mdc`），設計新規則的架構。
3.  **描述撰寫**: 遵循 `Rule Description` 規範，撰寫清晰、準確的描述。
4.  **內容建構**: 採用標準化的內容框架，確保一致性與完整性。
5.  **品質檢核**: 驗證規則內容的準確性、實用性與可讀性。

### Rule Description 撰寫規範
Description 應簡潔清晰地傳達 Rule 的核心價值，格式如下：
- **功能說明**: 總結規則的核心用途。
- **觸發條件**: 明確指出應在何種情境下調用此規則。
- **涵蓋範圍**: 列出規則能處理的具體領域或任務。
- **專精領域**: 強調其在特定場景下的專業性。

**標準格式範本**:
`[功能名稱] [用途說明]。當你需要 [具體觸發情境] 時調用此規則，用於 [涵蓋範圍和具體功能]。[特殊情境或補充說明]。`

## Cursor Rule 內容架構框架

### 📚 技術指導類規則
此類規則旨在提供特定技術的深度分析、實施策略與最佳實踐。
```markdown
# [技術主題] 開發與實施指南

## 🎯 專家分析與背景
- 技術選型的深層原因與權衡。
- 業界最佳實踐與標準。
- 核心概念與多年實戰經驗總結。

## 🔍 核心實施策略
### 技術架構設計
- 系統性架構藍圖與設計原則。
- 關鍵技術要點與性能優化考量。
### 開發實踐規範
- 程式碼組織、檔案命名與版本控制策略。

## 💻 具體實現指引
### 環境配置
- 開發環境設置、必要依賴與配置檔案範例。
### 程式碼實現
- 核心功能程式碼範例與最佳實踐。
- 常見陷阱與解決方案。

## 🚀 專家心路歷程
- 技術決策的權衡過程與經驗教訓。
- 長期優化策略與未來發展建議。

## 📋 品質檢核標準
- 功能完整性、性能指標、安全性與可維護性評估清單。
```

### 🛠️ 工具類規則
此類規則專注於特定工具的配置、使用技巧與整合策略。
```markdown
# [工具名稱] 使用與優化指南

## 🎯 工具定位與價值
- 工具旨在解決的核心問題及其在開發流程中的角色。
- 與專案中其他工具的整合關係。

## 📋 使用指南
### 基礎操作
- 標準安裝、配置流程與常用指令。
### 進階技巧
- 高級功能應用、自定義配置與性能優化。

## 💡 專家實戰經驗
- 真實應用場景分析與最佳實踐建議。
- 常見問題與故障排除手冊。

## 🔧 整合策略
- 與專案開發、測試、部署流程的整合方式。
- 團隊協作的最佳工作流程。
```

### 🏗️ 架構類規則
此類規則用於定義專案或系統的宏觀架構設計與實施規範。
```markdown
# [架構主題] 設計與實施規範

## 🎯 架構理念與原則
- 設計哲學、核心原則與架構目標 (如可擴展性、可靠性)。

## 📐 架構設計
### 系統結構
- 模組化設計、分層策略與介面定義。
### 技術選型
- 技術棧選擇依據、各組件職責劃分與整合策略。

## 🔄 實施流程
### 開發階段
- 開發環境準備、分階段實施計畫與里程碑。
### 部署策略
- 部署環境、發布流程與監控機制設計。

## 💡 專家架構經驗
- 架構演進的思考路徑與決策依據。
- 常見架構陷阱與反模式。
- 對未來擴展性的考量。

## 📊 評估標準
- 衡量架構成功的關鍵指標 (性能、可維護性、安全性)。
```

## 📖 專案 README.md 管理總覽

### 檔案職責
- **`legacy/README.md`**: Legacy 專案的說明與歷史歸檔。
- **`next/README.md`**: Next.js 重構專案的即時說明與使用指南。

### README 維護流程
1.  **內容分析**: 定期評估 README 內容的即時性與完整性。
2.  **結構優化**: 確保目錄結構清晰，資訊組織合理。
3.  **資訊更新**: 根據專案最新狀態（如依賴、環境變數）更新內容。
4.  **使用者導向**: 確保指南對新開發者友善且易於遵循。

### README 自動維護觸發條件
AI 將在以下情況下觸發 README.md 的自動更新：
- **專案結構變更**: 新增或移除核心目錄/檔案。
- **技術棧變更**: 關鍵依賴套件的增減或版本重大更新。
- **環境配置變更**: `.env.example` 檔案發生異動。
- **部署流程變更**: 建置或部署腳本更新。
- **使用者明確要求**: 當使用者下達指令要求更新時。

### README.md 標準結構
```markdown
# 專案名稱

## 🎯 專案概述
- 專案目的、核心功能與技術架構簡介。

## 🚀 快速開始
### 環境需求
- Node.js 版本、資料庫與其他環境依賴。
### 安裝步驟
```bash
# 1. 克隆專案
git clone [repository-url]
# 2. 安裝依賴
npm install
# 3. 配置環境變數
cp .env.example .env
# 4. 啟動開發伺服器
npm run dev
```

## 📁 專案結構
- 核心目錄與重要檔案的功能說明。

## 🛠️ 開發指南
- 開發工具、IDE 插件建議與調試技巧。
- 程式碼風格、Commit 規範與分支策略。

## 🚢 部署指引
- 生產環境建置與部署步驟。
- 必要的環境變數設定。

## 🤝 貢獻指南
- 貢獻流程、開發規範與程式碼審查標準。

## 📝 更新日誌 (Changelog)
- 連結至 CHANGELOG.md 或摘要說明重要版本變更。
```