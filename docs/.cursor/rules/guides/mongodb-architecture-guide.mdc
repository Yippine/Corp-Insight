---
description: MongoDB 開發與管理指南。當你需要了解本專案的 MongoDB 開發流程、初始化腳本 (`db:init`) 的使用、新增 Collection 的標準作業程序 (SOP)、或進行資料庫故障排除時調用此規則。此指南以 `scripts/init-mongodb-collections.js` 為唯一真實來源，專注於開發規範而非靜態的結構細節。
globs:
alwaysApply: false
---

# Corp Insight MongoDB 架構與開發指南

## 🎯 核心理念

本指南旨在提供一個清晰、高效的 MongoDB 開發與管理框架，是 `./project-architecture.mdc` 中資料庫層的具體實施細則。我們將 **`scripts/init-mongodb-collections.js`** 檔案作為資料庫結構的 **唯一真實來源 (Single Source of Truth)**。

**請勿在此文件手動添加 Collection 或索引的詳細欄位**。所有結構性變更都應在上述腳本中完成，以確保程式碼與文件的一致性。本指南專注於闡述 **設計原則**、**開發流程** 與 **標準作業程序 (SOP)**。

---

## 🛠️ 資料庫連線與設定

- **主要設定檔**: `.env.local`
- **連線字串變數**: `MONGODB_URI`
- **開發環境連線字串**: `mongodb://admin:password@localhost:27017/corp-insight?authSource=admin`
- **資料庫名稱**: `corp-insight`

---

## 🏗️ 資料庫架構設計

我們的資料庫 `corp-insight` 圍繞三大核心概念進行組織，以確保可擴展性與維護性。

#### 1. 核心業務資料 (Core Business Data)

- **用途**: 存放專案的核心價值資料，如企業、標案等。
- **包含**: `companies`, `tenders`, `ai_tools`, `feedbacks`
- **設計原則**: 結構清晰，索引優化，支援業務邏輯的複雜查詢。

#### 2. API 快取 (API Caches)

- **用途**: 快取外部 API 回應，降低延遲、減少 API 請求成本。
- **包含**: `pcc_api_cache`, `g0v_company_api_cache`, `twincn_api_cache`
- **設計原則**: 使用 TTL (Time-To-Live) 索引自動清理過期文件，確保資料新鮮度。

#### 3. 系統設定與日誌 (System Settings & Logs)

- **用途**: 記錄應用程式的關鍵事件、儲存全域設定。
- **包含**: `prompt_templates`, `api_key_statuses`, `email_verifications`
- **設計原則**: 針對常見查詢（如 `_id`、狀態、時間）建立索引，並可選用 TTL 清理舊日誌。

---

## ⚙️ 開發工作流程 (SOP)

所有資料庫相關的開發活動，都應遵循 `./development-conventions.mdc` 中定義的完整 SOP。本節僅摘錄與資料庫直接相關的部分。

### 1. 首次初始化資料庫

若要從零開始建立開發環境（包含啟動 Docker 容器與初始化所有 Collections），請執行：

```bash
npm run db:setup
```

此指令會自動執行 `start-mongodb.sh` 腳本，完成所有必要設定。

### 2. 新增 Collection

若要為專案新增一個 Collection，請遵循以下步驟：

1.  **開啟腳本**: 前往 `next/scripts/init-mongodb-collections.js`。
2.  **定義結構**: 在 `COLLECTIONS_CONFIG` 物件中，新增一個新的 Collection 定義，包含 `description` 和 `indexes`。

    ```javascript
    // next/scripts/init-mongodb-collections.js

    const COLLECTIONS_CONFIG = {
      // ... existing collections
      new_collection_name: {
        description: "這是一個新 Collection 的簡短描述",
        indexes: [
          { keys: { fieldToIndex: 1 }, options: { name: "index_name_1" } },
          {
            keys: { anotherField: -1 },
            options: { unique: true, name: "unique_index_name" },
          },
        ],
      },
    };
    ```

3.  **執行初始化**: 儲存檔案後，在終端機執行 `npm run db:init`，腳本將會自動建立新的 Collection 及其索引。

### 3. 修改索引

若要修改現有 Collection 的索引：

1.  **定位腳本**: 同樣在 `next/scripts/init-mongodb-collections.js` 中。
2.  **修改定義**: 找到對應 Collection 的 `indexes` 陣列，直接修改、新增或刪除其中的索引設定。
3.  **重新執行初始化**: 執行 `npm run db:init`。腳本會智能地比對變更：
    - 如果索引設定不同，它會自動**刪除舊索引並建立新索引**。
    - 如果索引不存在，則會直接建立。

---

## 📜 NPM 指令稿使用指南

以下是 `package.json` 中最核心的資料庫相關指令，已為您分類整理：

| 分類               | 指令                           | 功能描述                                                                       |
| :----------------- | :----------------------------- | :----------------------------------------------------------------------------- |
| 🚀 **一鍵啟動**    | `npm run db:setup`             | **(推薦)** 啟動 MongoDB 容器並執行初始化腳本，從無到有建立好資料庫。           |
| 🔄 **手動初始化**  | `npm run db:init`              | 僅執行 `init-mongodb-collections.js` 腳本，用於建立或更新 Collections 與索引。 |
| 🔗 **連線互動**    | `npm run db:connect-docker`    | 使用 `mongosh` 連接到 Docker 中的 MongoDB 實例，方便手動查詢與管理。           |
| 🗄️ **備份/還原**   | `npm run db:backup`            | 備份核心資料 (`core`) 或日誌 (`logs`) 到一個壓縮檔。                           |
|                    | `npm run db:restore`           | 從備份檔中互動式地選擇並還原資料。                                             |
|                    | `npm run db:list`              | 分析並列出備份檔案的內容。                                                     |
| 🧹 **維護清理**    | `npm run db:clean`             | 清理過期的日誌與 API 快取資料。                                                |
| 🐳 **Docker 管理** | `npm run docker:mongo`         | 僅啟動 MongoDB 服務。                                                          |
|                    | `npm run docker:restart:mongo` | 重新啟動 MongoDB 容器。                                                        |

---

## 🔍 故障排除

遇到 MongoDB 連線或操作問題時，請依循以下步驟檢查：

1.  **確認 Docker 服務**

    - **問題**: 終端機出現 `Cannot connect to the Docker daemon` 錯誤。
    - **解決**: 請先**啟動 Docker Desktop**。

2.  **確認 MongoDB 容器狀態**

    - **問題**: 連線被拒絕 (ECONNREFUSED) 或超時。
    - **指令**: `docker ps` 或 `npm run docker:ps`
    - **解決**:
      - 如果看不到 `mongo` 或 `mongodb` 容器，請執行 `npm run docker:mongo` 啟動它。
      - 如果容器狀態不是 `Up` 或 `running`，請用 `npm run docker:restart:mongo` 重新啟動。

3.  **檢查日誌**

    - **問題**: 容器無法正常啟動。
    - **指令**: `docker logs mongo` (或容器名稱)
    - **解決**: 根據日誌中的錯誤訊息（如埠口衝突、設定錯誤）進行排查。

4.  **終極重置**

    - **問題**: 如果上述方法都無效，可以考慮完全重置資料庫環境。
    - **警告**: 這會刪除所有本地資料！
    - **指令**:

      ```bash
      # 1. 停止並移除容器與網路
      npm run stop

      # 2. 移除 MongoDB 資料卷 (最關鍵的一步)
      docker volume rm next_mongodb_data

      # 3. 重新建立所有服務
      npm run db:setup
      ```

---

## 💡 最佳實踐

- **單一真實來源**: 始終透過 `init-mongodb-collections.js` 管理資料庫結構。
- **原子化操作**: 腳本會自動處理索引的更新，避免手動操作資料庫。
- **TTL 索引**: 對於快取和部分日誌集合，善用 `expireAfterSeconds` 選項自動清理資料。
- **定期備份**: 在生產環境中，應建立定期執行的 `mongodump` 備份策略。
