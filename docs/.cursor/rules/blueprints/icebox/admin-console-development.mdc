---
description: Admin Console 開發藍圖與實施指南。當你需要開發新的 Admin Console 頁面 (如 /admin/system)、或回顧／修改現有 Admin Console 功能的架構與進度時調用此規則。本規則旨在遵循統一的宏觀架構、開發 SOP 與黃金標準範本，確保 Admin Console 功能開發的一致性。此為階段性開發藍圖，將隨開發進度更新。
globs: 
alwaysApply: false
---
# 🎯 專案代號：Admin Console 開發藍圖

## 1. 背景與動機 (Background & Motivation)

### 1.1. 待解決問題
隨著專案功能日趨複雜，開發與維運所需的 `npm scripts` 數量不斷增長。目前完全依賴開發人員手動在終端機執行指令，帶來以下挑戰：
- **操作風險高**: `db:restore`, `db:clean` 等高風險指令存在誤操作可能。
- **效率低下**: 開發人員需記憶多個指令，並在不同工具間切換，無法一站式管理。
- **知識孤島**: 對指令不熟悉的開發者難以上手，維運知識難以傳承。
- **缺乏反饋**: 終端機指令的執行過程與結果不透明，難以追蹤。

### 1.2. 專案目標
本專案旨在建立一個位於 `/admin/*` 下的內部「**開發人員維運控制台 (Developer Operations Console)**」。此控制台將取代手動指令，提供一個**安全、高效、易用**的 Web 介面來管理日常開發與維運任務，從而將維運工作流程化、標準化。

每個控制台頁面都應是一個**整合式的多功能工作台**，而不僅僅是按鈕的集合，需包含：
- **狀態總覽 (Monitoring)**: 以儀表板形式呈現關鍵指標。
- **詳細狀態 (Detailed View)**: 以卡片形式展示各個項目的具體數據。
- **內容檢視 (Inspection)**: 提供頁內檢視器以查看原始數據或日誌。
- **操作管理 (Management)**: 提供一個佈局優雅、高可讀性的操作區塊，包含獨立的終端機視窗，以安全地執行 `npm script`。

## 2. 架構概覽 (Architecture Overview)

本專案採用前後端分離的架構，核心流程如下：

```mermaid
graph TD
    subgraph "Frontend (Next.js)"
        A[Admin Page: e.g., /admin/sitemap] --> B{FeatureConsole Component};
        B --> C[StatsDashboard];
        B --> D[StatusCard Grid];
        B --> E[ContentViewer];
        B --> F[Task Automation Section];
        F --> G[Task Buttons];
        F --> H[TerminalViewer];
    end

    subgraph "Backend (Next.js API Route)"
        G -- "API Request (scriptName)" --> I[/api/admin/run-script];
    end

    subgraph "Server-Side Execution"
        I -- "Validate & Execute" --> J[child_process.spawn("npm", ["run", scriptName])];
        J -- "Stream stdout/stderr" --> I;
    end

    I -- "Stream Response" --> H;

    style A fill:#D6EAF8,stroke:#333,stroke-width:2px
    style B fill:#D1F2EB,stroke:#333,stroke-width:2px
    style C fill:#E8DAEF,stroke:#333,stroke-width:1px
    style D fill:#E8DAEF,stroke:#333,stroke-width:1px
    style E fill:#E8DAEF,stroke:#333,stroke-width:1px
    style F fill:#FDEDEC,stroke:#333,stroke-width:2px
    style G fill:#FDF2E9,stroke:#333,stroke-width:1px
    style H fill:#FDF2E9,stroke:#333,stroke-width:1px
    style I fill:#FAD7A0,stroke:#333,stroke-width:2px
    style J fill:#FEF9E7,stroke:#333,stroke-width:2px
```

- **前端**: 由多個管理頁面 (`/admin/*`) 組成，每個頁面使用一個核心的**功能控制台元件** (如 `SitemapConsole.tsx`) 來組織 UI。該元件內部包含儀表板、狀態卡片、內容檢視器，以及一個包含任務按鈕和獨立終端機視窗的操作區塊。
- **後端**: 一個統一的 API 端點 (`/api/admin/run-script`) 負責接收前端請求。
- **執行層**: API 端點會驗證腳本名稱的合法性，然後使用 `child_process.spawn` 安全地執行對應的 `npm script`，並將輸出以串流形式即時回傳給前端。

## 3. 開發規格與任務 (SOP)

### Phase 1: 基礎架構與黃金標準建立

**目標**: 建立 Admin Console 的基礎，並將 `sitemap` 功能頁面作為後續所有頁面的「黃金標準範本」。

- **[x] 1.1: 建立 Admin 專用佈局**
- **[x] 1.2: 建立後端腳本執行 API**
- **[x] 1.3: 更新 `../guides/development-conventions.mdc` 規則**
- **[x] 1.4: (REBUILT & REFINED) 重建並優化 Sitemap 整合控制台**
    - **位置**: `/admin/sitemap`
    - **目標**: 建立一個功能完整、佈局優雅的 Sitemap 控制台，作為後續所有頁面的範本。
    - **動作**:
        - 建立核心元件 `SitemapConsole.tsx`，整合儀表板、三欄式狀態卡片、頁內內容檢視器 (`SitemapContentViewer.tsx`)。
        - 建立一個全新的兩欄式「自動化管理」區塊，左側為任務按鈕，右側為一個獨立、可關閉的 `TerminalViewer.tsx` 元件。
        - 確保頁面符合 Admin Console 的「零 SEO/GA」與「UI/UX 美感」規範。

### Phase 2: 功能頁面開發 (Feature Pages Development)

**目標**: 參照 `/admin/sitemap` 頁面的結構，實作所有規劃的管理頁面。

- **[x] 2.1: 建立資料庫維運控制台**
    - **位置**: `/admin/database`
    - **要求**:
        - 建立一個新的核心元件，如 `DatabaseConsole.tsx`。
        - 參照 `SitemapConsole.tsx` 的結構，加入儀表板、狀態卡片和「自動化管理」區塊。
        - **儀表板/狀態卡片** 可顯示資料庫連線狀態、集合數量、備份時間等。
        - **任務按鈕** 需對應 4.1 節中所有 `db:*` 的腳本。
        - **內容檢視器** 可顯示如 `db:list` 的執行結果。

- **[ ] 2.2: 建立系統診斷控制台**
    - **位置**: `/admin/system`
    - **要求**:
        - 建立一個新的核心元件，如 `SystemConsole.tsx`。
        - 參照 `SitemapConsole.tsx` 的結構。
        - **儀表板/狀態卡片** 可顯示格式化、Linter 檢查結果的摘要。
        - **任務按鈕** 需對應 4.1 節中 `health:*`, `format:*`, `lint` 的所有腳本。
        - **內容檢視器** 可顯示如 `lint` 的詳細報告。

### Phase 3: 驗收與交付 (Finalization)
- **[ ] 3.1: 完整功能測試**: 確保每個按鈕都能正確執行對應的腳本並回傳結果。
- **[ ] 3.2: 安全性審查**: 再次確認 API 的 Secret Token 權限控管是否到位。
- **[ ] 3.3: 更新本文件**: 將所有已完成的項目打勾，並在進度追蹤中記錄最終版本號。




---

## 4. 範圍邊界 (Scope Boundaries)

### 4.1. 納入範圍的 Scripts (Whitelist)
- **Sitemap Management**: `sitemap:test`, `sitemap:monitor`, `sitemap:stop`, `sitemap:status`, `sitemap:clear`
- **Database Operations**: `db:init`, `db:connect`, `db:backup`, `db:backup:core`, `db:restore`, `db:list`, `db:clean`
- **System Diagnostics**: `health:check`, `format:check`, `lint`

### 4.2. 排除範圍的 Scripts (Blacklist)
以下類型的 Scripts 因其高風險性或不適合在 Web UI 中執行，被明確排除：
- **服務生命週期**: 所有 `docker:*`, `start:*`, `stop`, `dev`, `build`, `start`。
- **破壞性操作**: `docker:purge`, `fix:deps`。
- **部署流程**: `deploy:prod`。

## 5. 開發進度追蹤 (Development Log)

*(每次提交程式碼時，請在此處新增一筆日誌)*

- **2025-06-19**: `Yippine/AI` - 正式上版 v2，重構 Database Console UI/UX 並確立 Admin 黃金開發準則。
- **2025-06-18**: `AI` - 建立 Database 控制台基礎架構。
- **2025-06-18**: `Yippine/AI` - 正式上版 v1，確立含獨立終端機的黃金標準。
- **2025-06-18**: `AI` - 重建 `/admin/sitemap` 頁面，確立整合式控制台的黃金標準。
- **2025-06-17**: `Yippine/AI` - 建立 Admin Console 基礎架構 (Layout, API, TaskRunnerCard)。

- `YYYY-MM-DD`: `[Your Name/AI]` - `[Description of work done]`