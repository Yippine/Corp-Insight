---
description: 上線後優化任務 (Post-Launch Optimization Plan)。當需要規劃或回顧專案在正式上線後的長期發展與優化路徑時調用此規則。本規則涵蓋 Gemini API 金鑰池、AI 工具搜尋引擎增強、通用聊天介面開發、以及公司與標案資料頁面效能優化等進階任務。
globs: 
alwaysApply: false
---
# 🌟 上線後優化任務計畫 (Post-Launch Optimization Plan)

## 🎯 總體目標
在專案成功上線後，持續迭代與創新，提升系統的健壯性、智慧化程度與使用者體驗，鞏固產品的市場競爭力。

---

## 📝 任務列表

### 1. 🔑【架構】建立 Gemini API 金鑰池 (Key Pool)

- **目標**: 建立一個具備容錯與負載平衡能力的 API 金鑰池，以應對未來高流量需求，避免因單一金鑰額度耗盡而服務中斷。
- **狀態**: `未開始`
- **核心檔案**:
    - **API 呼叫邏輯**: `next/src/lib/gemini.server.ts`
    - **環境變數範本**: `next/.env.example`
- **子任務**:
    1.  **[設計]** 在 `.env.example` 中定義新的環境變數格式，例如 `GEMINI_API_KEYS`，以逗號分隔多個金鑰。
    2.  **[實作]** 修改 `next/src/lib/gemini.server.ts`。
        - 啟動時讀取 `GEMINI_API_KEYS` 並將其解析為一個金鑰陣列。
        - 建立一個輪詢或隨機選擇器，從池中挑選一個金鑰用於每次 API 請求。
        - 包裝 API 呼叫邏輯，加入 `try...catch` 區塊。
    3.  **[錯誤處理]** 在 `catch` 區塊中，偵測特定的 API 錯誤 (如額度用盡、金鑰失效)。
        - 若偵測到此類錯誤，將該金鑰標記為暫時不可用，並自動使用池中的下一個金鑰重試請求。
        - 設計重試次數上限，避免無限循環。
    4.  **[終端錯誤]** 如果池中所有金鑰都嘗試失敗，則向前端返回一個標準化的錯誤訊息，觸發前端顯示「系統忙碌中，請稍後再試」等溫馨提示。
    5.  **[驗證]** 撰寫測試案例，模擬金鑰失效的情境，確保金鑰切換與重試機制能如預期般運作。

---

### 2. 🔍【功能】AI 工具搜尋引擎全面升級

- **目標**: 擴大搜尋範圍、引入模糊搜尋機制，並探索更智慧化的搜尋策略，讓使用者能用任何想得到的關鍵字，輕鬆找到所需工具。
- **狀態**: `未開始`
- **關鍵路由**: `/aitool/search`
- **核心檔案**:
    - **搜尋 API**: `next/src/app/api/aitool/route.ts`
    - **前端組件**: `next/src/components/aitool/AiToolSearch.tsx`
    - **資料模型**: `next/src/lib/database/models/AITool.ts`
- **子任務**:
    1.  **[範圍擴展]** 分析 `next/src/app/api/aitool/route.ts` 中的 MongoDB 查詢邏輯。
        - 確認當前的搜尋欄位，並將其擴展至包含：`name`, `description`, `tags` 以及 `what`, `why`, `how` 等詳細說明文字。
        - 可能需要在 `AITool` model 中為這些欄位建立索引以優化效能。
    2.  **[模糊搜尋]** 研究並引入 MongoDB 的 `$text` 全文檢索或 Atlas Search 功能，以取代或增強現有的精準匹配，實現更自然的模糊搜尋。
    3.  **[策略思考 - 探索題]**:
        - **情境**: 使用者可能不知道工具的正式名稱，例如想找「幫我想文案」的工具，而非搜尋「Description Generator」。
        - **解法 1 (基於標籤)**: 為每個工具擴充更多「同義詞」或「使用情境」標籤，如為文案工具加上 `文案`, `廣告詞`, `slogan` 等標籤。
        - **解法 2 (基於語意)**: 引入 Vector Search。將所有工具的描述性文本（名稱、描述、標籤等）轉換為向量嵌入(Embeddings)，並將使用者查詢也轉換為向量。透過計算向量相似度，找出語意上最相關的工具。這是最智慧化但實作也最複雜的方案。
    4.  **[實作與驗證]** 根據選擇的方案進行實作，並透過多樣化的關鍵字測試搜尋效果。

---

### 3. 💬【創新】開發通用型智慧聊天介面

- **目標**: 建立一個全新的聊天介面，讓使用者透過自然語言提問，系統能自動理解意圖，並在背後組合多個相關的 AI 工具 Prompt，提供精準、深入的回答。
- **狀態**: `未開始`
- **建議路由**: `/aitool/chat` (語意最清晰)
- **核心挑戰**: Prompt Chaining (提示鏈) 與 Prompt Routing (提示路由)
- **子任務**:
    1.  **[前端建置]**
        - 建立新頁面 `next/src/app/aitool/chat/page.tsx`。
        - 設計一個類似 ChatGPT 的聊天 UI，包含輸入框、對話歷史紀錄區塊。
    2.  **[後端架構]**
        - 建立新的 API 端點，例如 `next/src/app/api/aitool/chat/route.ts`。
        - 此 API 是核心，負責接收使用者的問題。
    3.  **[智慧路由邏輯 - 核心]**
        - **步驟 A (意圖分類)**: 對使用者的問題進行初步分析，判斷其意圖。這可以透過一個「元 Prompt」(Meta Prompt) 讓 Gemini 判斷，或使用關鍵字規則。例如，問題包含「財務」、「股票」，則意圖可能與金融相關。
        - **步驟 B (Prompt 選擇)**: 根據意圖，從資料庫中動態選擇最適合的「角色 Prompt」、「產業 Prompt」或「工具 Prompt」。例如，金融問題可以組合「資深財務分析師」角色 Prompt 和「財務報表分析」工具 Prompt。
        - **步驟 C (Prompt 組合)**: 將選擇的多個 Prompts 與使用者的原始問題組合成一個最終的、結構化的超級 Prompt。
        - **步驟 D (執行與回覆)**: 將組合好的 Prompt 發送給 Gemini API，並將結果串流 (stream) 回傳給前端。
    4.  **[整合與測試]** 進行端到端的測試，不斷調整 Prompt 組合策略以優化回答品質。

---

### 4. 📈【優化】公司與標案資料頁面效能

- **目標**: 解決公司詳細頁中，因標案數量過多導致的查詢緩慢或超時問題，並在未來實現頁面間的雙向連結。
- **狀態**: `未開始`
- **核心檔案**:
    - **公司詳細頁**: `next/src/app/company/detail/[taxId]/page.tsx`
    - **標案 API**: `next/src/lib/tender/api.ts` (或相關資料獲取邏輯)
- **子任務**:
    1.  **[標案列表優化]**
        - 在 `CompanyDetail` 頁面中，將一次性載入所有標案的邏輯，改為分頁 (Pagination) 或無限滾動 (Infinite Scroll) 加載。
        - 這需要在後端 API 中支援分頁參數 (`page`, `limit`)。
    2.  **[雙向連結]**
        - 當標案列表能順暢顯示後，確保公司頁的每個標案都能點擊連結至 `/tender/detail/[tenderId]`。
        - 確保標案詳細頁也有清晰的連結可以返回至 `/company/detail/[taxId]`。
    3.  **[YES/NO 欄位聚合 - 樣式優化]**
        - 參考 `legacy` 專案的設計，在標案詳細頁 (`TenderDetail.tsx`) 中，新增一個區塊，專門用來集中顯示所有值為 `是/否` 或 `有/無` 的欄位，讓使用者一目了然。此為樣式優化，優先級較低。

---

### 5. 💡 未來考量 (Post-Launch)
- **遷移至 Atlas Search**: 本次為滿足時限採用程式控制方案。專案上線穩定後，應規劃將搜尋功能遷移至 MongoDB Atlas Search，以獲得更佳的效能、更低的維護成本與更強大的功能 (如 `MoreLikeThis`)，應對未來百萬級資料量。
- **擴充標籤庫**: 目前 `"生產力"`, `"報告"` 等通用詞無結果，是內容問題。上線後應豐富 `tags` 庫，提升搜尋覆蓋面。
- **使用者搜尋行為分析**: 記錄使用者搜尋失敗的關鍵字，作為優化 `tags` 和工具內容的依據。

---

## 6. 當前進度與後續步驟 (Current Status & Next Steps)

-   **當前狀態**: `規劃階段` - 已根據使用者需求，將上線後的優化與創新任務進行了全面的盤點與文件化。
-   **後續步驟**:
    1.  **優先級排序**: 待「上線前緊急任務」完成後，團隊將根據商業價值與開發成本，對本計畫中的任務進行優先級排序。
    2.  **細化設計**: 在啟動任何一項任務前，將進行更深入的技術設計與方案評估。
    3.  **迭代開發**: 依照排定的優先級，逐一啟動並開發列表中的優化項目。

---

## 7. 開發進度追蹤 (Development Log)

-   **YYYY-MM-DD**:
    -   **行動**: 建立了 `post-launch-optimization-plan.mdc` v1.0，將具前瞻性的優化點子轉化為可追蹤的開發計畫。
    -   **決策**: 確認了四大優化方向：API 金鑰池、智慧搜尋、通用聊天介面、以及後端效能。


    -   **後續**: 此計畫將作為專案長期發展的路線圖。